/*The contents of this file are subject to the Mozilla Public License Version 1.1
(the "License"); you may not use this file except in compliance with the
License. You may obtain a copy of the License at http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is the GonzoNet.

The Initial Developer of the Original Code is
Mats 'Afr0' Vederhus. All Rights Reserved.

Contributor(s): ______________________________________.
*/

using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.IO;

namespace GonzoNet.Encryption
{
    public class AESEncryptor : Encryptor
    {
        private AES m_AES;
        private byte[] m_Key, m_IV;

        /// <summary>
        /// Gets the key used for en/decryption by this AESEncryptor instance.
        /// </summary>
        public byte[] Key
        {
            get { return m_Key; }
        }

        /// <summary>
        /// Gets the initialization vector used for en/decryption by this AESEncryptor instance.
        /// </summary>
        public byte[] IV
        {
            get { return m_IV; }
        }

        /// <summary>
        /// Creates a new AESEncryptor instance, which can be used to
        /// encrypt and decrypt data with AES.
        /// </summary>
        /// <param name="Key">The key to use. Received from server or generated by AesCryptoServiceProvider.</param>
        /// <param name="IV">The initialization vector to use. Received from server or generated by AesCryptoServiceProvider.</param>
        /// <param name="Password">User's password.</param>
        public AESEncryptor(byte[] Key, byte[] IV, string Password)
            : base(Password)
        {
            m_AES = new AES(Key, IV);
        }

        /// <summary>
        /// Creates a new AESEncryptor instance, which can be used to
        /// encrypt and decrypt data with AES.
        /// </summary>
        /// <param name="Password">User's password.</param>
        public AESEncryptor(string Password)
            : base(Password)
        {
            AesCryptoServiceProvider AesCryptoService = new AesCryptoServiceProvider();
            AesCryptoService.GenerateKey();
            AesCryptoService.GenerateIV();

            m_AES = new AES(AesCryptoService.Key, AesCryptoService.IV);
        }

        public override DecryptionArgsContainer GetDecryptionArgsContainer()
        {
            DecryptionArgsContainer Container = new DecryptionArgsContainer();
            Container.AESDecryptArgs = new AESDecryptionArgs();
            Container.AESDecryptArgs.Key = m_Key;
            Container.AESDecryptArgs.IV = m_IV;

            return Container;
        }

        public override byte[] FinalizePacket(byte PacketID, byte[] PacketData)
        {
            MemoryStream PacketStream = new MemoryStream();
            BinaryWriter PacketWriter = new BinaryWriter(PacketStream);

            PacketWriter.Write(PacketID);

            byte[] EncryptedData = m_AES.Encrypt(PacketData);
            //The length of the encrypted data can be longer or smaller than the original length,
            //so write the length of the encrypted data.
            PacketWriter.Write((ushort)(PacketHeaders.ENCRYPTED + EncryptedData.Length));
            //Also write the length of the unencrypted data.
            PacketWriter.Write((ushort)PacketData.Length);
            PacketWriter.Flush();

            PacketWriter.Write(EncryptedData);
            PacketWriter.Flush();

            return PacketStream.ToArray();
        }

        public override MemoryStream DecryptPacket(PacketStream EncryptedPacket, DecryptionArgsContainer DecryptionArgs)
        {
            byte[] EncryptedData = new byte[EncryptedPacket.BufferLength];
            EncryptedPacket.Read(EncryptedData, 0, EncryptedData.Length);
            byte[] DecryptedData = m_AES.Decrypt(EncryptedData);

            return new MemoryStream(DecryptedData);
        }
    }
}
