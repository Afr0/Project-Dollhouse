using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using GonzoNet;
using CityDataModel;
using CityDataModel.Entities;

namespace TSO_CityServer.Network
{
    public class LoginPacketHandlers
    {
        /// <summary>
        /// A client wanted to transfer to this server, so a token was generated by the login server.
        /// </summary>
        public static void HandleClientToken(NetworkClient Client, ProcessedPacket P)
        {
            try
            {
                ClientToken Token = new ClientToken();
                Token.AccountID = P.ReadInt32();
                Token.ClientIP = P.ReadString();
				int ClientPort = P.ReadInt32();
                Token.CharacterGUID = P.ReadString();
                Token.Token = P.ReadString();

				PacketStream PlayerOnlinePacket = new PacketStream(0x67, 0);
				PlayerOnlinePacket.WriteHeader();
				PlayerOnlinePacket.WriteUInt16((ushort)(PacketHeaders.UNENCRYPTED + 1 +
					Token.Token.Length + 1 + Token.ClientIP.Length + 1 + 4));

				if (NetworkFacade.CurrentSession.GetPlayer(Token.CharacterGUID) == null)
				{
					PlayerOnlinePacket.WriteByte(0x01);
					PlayerOnlinePacket.WriteString(Token.Token);
					PlayerOnlinePacket.WriteString(Token.ClientIP);
					PlayerOnlinePacket.WriteInt32(ClientPort);

					if (!NetworkFacade.TransferringClients.Contains(Token))
						NetworkFacade.TransferringClients.Add(Token);

					Client.Send(PlayerOnlinePacket.ToArray());
				}
				else
				{
					PlayerOnlinePacket.WriteByte(0x02);
					PlayerOnlinePacket.WriteString(Token.Token);
					PlayerOnlinePacket.WriteString(Token.ClientIP);
					PlayerOnlinePacket.WriteInt32(ClientPort);

					Client.Send(PlayerOnlinePacket.ToArray());
				}
            }
            catch (Exception E)
            {
                Logger.LogDebug("Exception in HandleClientToken: " + E.ToString());
            }
        }

        /// <summary>
        /// A client decided to retire a character.
        /// </summary>
        public static void HandleCharacterRetirement(NetworkClient Client, ProcessedPacket P)
        {
            int AccountID = P.ReadInt32();
            string GUID = P.ReadString();

            using (DataAccess db = DataAccess.Get())
            {
                IQueryable<Character> Query = db.Characters.GetForAccount(AccountID);

                //FUCK, I hate LINQ.
                Guid CharGUID = new Guid(GUID);
                Character Char = Query.Where(x => x.GUID == CharGUID).SingleOrDefault();
                db.Characters.RetireCharacter(Char);
            }
        }
    }
}
