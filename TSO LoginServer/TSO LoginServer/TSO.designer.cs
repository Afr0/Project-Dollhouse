#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSO_LoginServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TSO")]
	public partial class TSODataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    #endregion
		
		public TSODataContext() : 
				base(global::TSO_LoginServer.Properties.Settings.Default.TSOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TSODataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TSODataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TSODataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TSODataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Character> Characters
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
	}
	
	[Table(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _AccountName;
		
		private string _Password;
		
		private System.Nullable<int> _NumCharacters;
		
		private System.Nullable<int> _Character1;
		
		private System.Nullable<int> _Character2;
		
		private System.Nullable<int> _Character3;
		
		private EntityRef<Character> _Character;
		
		private EntityRef<Character> _Character4;
		
		private EntityRef<Character> _Character5;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNumCharactersChanging(System.Nullable<int> value);
    partial void OnNumCharactersChanged();
    partial void OnCharacter1Changing(System.Nullable<int> value);
    partial void OnCharacter1Changed();
    partial void OnCharacter2Changing(System.Nullable<int> value);
    partial void OnCharacter2Changed();
    partial void OnCharacter3Changing(System.Nullable<int> value);
    partial void OnCharacter3Changed();
    #endregion
		
		public Account()
		{
			this._Character = default(EntityRef<Character>);
			this._Character4 = default(EntityRef<Character>);
			this._Character5 = default(EntityRef<Character>);
			OnCreated();
		}
		
		[Column(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_NumCharacters", DbType="Int")]
		public System.Nullable<int> NumCharacters
		{
			get
			{
				return this._NumCharacters;
			}
			set
			{
				if ((this._NumCharacters != value))
				{
					this.OnNumCharactersChanging(value);
					this.SendPropertyChanging();
					this._NumCharacters = value;
					this.SendPropertyChanged("NumCharacters");
					this.OnNumCharactersChanged();
				}
			}
		}
		
		[Column(Storage="_Character1", DbType="Int")]
		public System.Nullable<int> Character1
		{
			get
			{
				return this._Character1;
			}
			set
			{
				if ((this._Character1 != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacter1Changing(value);
					this.SendPropertyChanging();
					this._Character1 = value;
					this.SendPropertyChanged("Character1");
					this.OnCharacter1Changed();
				}
			}
		}
		
		[Column(Storage="_Character2", DbType="Int")]
		public System.Nullable<int> Character2
		{
			get
			{
				return this._Character2;
			}
			set
			{
				if ((this._Character2 != value))
				{
					if (this._Character4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacter2Changing(value);
					this.SendPropertyChanging();
					this._Character2 = value;
					this.SendPropertyChanged("Character2");
					this.OnCharacter2Changed();
				}
			}
		}
		
		[Column(Storage="_Character3", DbType="Int")]
		public System.Nullable<int> Character3
		{
			get
			{
				return this._Character3;
			}
			set
			{
				if ((this._Character3 != value))
				{
					if (this._Character5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacter3Changing(value);
					this.SendPropertyChanging();
					this._Character3 = value;
					this.SendPropertyChanged("Character3");
					this.OnCharacter3Changed();
				}
			}
		}
		
		[Association(Name="Character_Account", Storage="_Character", ThisKey="Character1", OtherKey="CharacterID", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Character1 = value.CharacterID;
					}
					else
					{
						this._Character1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		[Association(Name="Character_Account1", Storage="_Character4", ThisKey="Character2", OtherKey="CharacterID", IsForeignKey=true)]
		public Character Character4
		{
			get
			{
				return this._Character4.Entity;
			}
			set
			{
				Character previousValue = this._Character4.Entity;
				if (((previousValue != value) 
							|| (this._Character4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character4.Entity = null;
						previousValue.Accounts1.Remove(this);
					}
					this._Character4.Entity = value;
					if ((value != null))
					{
						value.Accounts1.Add(this);
						this._Character2 = value.CharacterID;
					}
					else
					{
						this._Character2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Character4");
				}
			}
		}
		
		[Association(Name="Character_Account2", Storage="_Character5", ThisKey="Character3", OtherKey="CharacterID", IsForeignKey=true)]
		public Character Character5
		{
			get
			{
				return this._Character5.Entity;
			}
			set
			{
				Character previousValue = this._Character5.Entity;
				if (((previousValue != value) 
							|| (this._Character5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character5.Entity = null;
						previousValue.Accounts2.Remove(this);
					}
					this._Character5.Entity = value;
					if ((value != null))
					{
						value.Accounts2.Add(this);
						this._Character3 = value.CharacterID;
					}
					else
					{
						this._Character3 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Character5");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Characters")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharacterID;
		
		private string _GUID;
		
		private string _LastCached;
		
		private string _Name;
		
		private string _Sex;
		
		private string _City;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Account> _Accounts1;
		
		private EntitySet<Account> _Accounts2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnLastCachedChanging(string value);
    partial void OnLastCachedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
		
		public Character()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Accounts1 = new EntitySet<Account>(new Action<Account>(this.attach_Accounts1), new Action<Account>(this.detach_Accounts1));
			this._Accounts2 = new EntitySet<Account>(new Action<Account>(this.attach_Accounts2), new Action<Account>(this.detach_Accounts2));
			OnCreated();
		}
		
		[Column(Storage="_CharacterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[Column(Storage="_GUID", DbType="NVarChar(50)")]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastCached", DbType="NVarChar(50)")]
		public string LastCached
		{
			get
			{
				return this._LastCached;
			}
			set
			{
				if ((this._LastCached != value))
				{
					this.OnLastCachedChanging(value);
					this.SendPropertyChanging();
					this._LastCached = value;
					this.SendPropertyChanged("LastCached");
					this.OnLastCachedChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="NVarChar(50)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Association(Name="Character_Account", Storage="_Accounts", ThisKey="CharacterID", OtherKey="Character1")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Character_Account1", Storage="_Accounts1", ThisKey="CharacterID", OtherKey="Character2")]
		public EntitySet<Account> Accounts1
		{
			get
			{
				return this._Accounts1;
			}
			set
			{
				this._Accounts1.Assign(value);
			}
		}
		
		[Association(Name="Character_Account2", Storage="_Accounts2", ThisKey="CharacterID", OtherKey="Character3")]
		public EntitySet<Account> Accounts2
		{
			get
			{
				return this._Accounts2;
			}
			set
			{
				this._Accounts2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_Accounts1(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character4 = this;
		}
		
		private void detach_Accounts1(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character4 = null;
		}
		
		private void attach_Accounts2(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character5 = this;
		}
		
		private void detach_Accounts2(Account entity)
		{
			this.SendPropertyChanging();
			entity.Character5 = null;
		}
	}
}
#pragma warning restore 1591
